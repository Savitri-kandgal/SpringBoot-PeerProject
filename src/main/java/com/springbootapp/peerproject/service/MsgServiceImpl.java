package com.springbootapp.peerproject.service;

import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.springbootapp.peerproject.Entity.MessageEntity;
import com.springbootapp.peerproject.dto.MessageDTO;
import com.springbootapp.peerproject.repository.MessageRepository;


@Service
public class MsgServiceImpl implements MsgService {

	private static final Logger LOGGER=LoggerFactory.getLogger(MsgServiceImpl.class);
	
	@Autowired // This means to get the bean called msgRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private MessageRepository msgRepository;


	//@Autowired
	//public MessageMapper mapper= Mappers.getMapper(MessageMapper.class);
	
	public MsgServiceImpl() {
		LOGGER.info("LOGGER : MsgServiceImpl :" + this.getClass().getSimpleName() + "object created");
	}
	
	@Override
	public int validateAndSave(MessageDTO dto) {
		int valid = 1;
		try {
			if (Objects.nonNull(dto)) {
				LOGGER.info("LOGGER : MsgServiceImpl : starting to validate fields");

				if (dto.getfName() != null && !dto.getfName().isEmpty()) {
					LOGGER.info("LOGGER : MsgServiceImpl : fname is valid :" + dto.getfName());

					valid = 0;
				} else {
					LOGGER.info("LOGGER : MsgServiceImpl : fname is invalid :");
					valid = 1;
				}

				if (valid == 0 && dto.gettName() != null && !dto.gettName().isEmpty()) {
					LOGGER.info("LOGGER : MsgServiceImpl : Tname is valid :" + dto.gettName());

					valid = 0;
				} else {
					LOGGER.info("LOGGER : MsgServiceImpl :  Tname is invalid :");
					valid = 1;
				}

				if (valid == 0 && dto.getMessage() != null && !dto.getMessage().isEmpty()) {
					LOGGER.info("LOGGER : MsgServiceImpl : Message is valid :" + dto.getMessage());
					valid = 0;
				} else {
					LOGGER.info("LOGGER : MsgServiceImpl : Message is invalid :");
					valid = 1;
				}

				LOGGER.info("LOGGER : MsgServiceImpl : Checking if all fields are entered");
				if (valid == 0) {
					LOGGER.info("LOGGER : MsgServiceImpl : informations are valid :" + valid);

					LOGGER.info("LOGGER : MsgServiceImpl : copying data from dto to MessageEntity");
					MessageEntity mEntity = new MessageEntity();
					//MessageEntity mEntity =mapper.dtoToEntity(dto);
					BeanUtils.copyProperties(dto, mEntity);
					msgRepository.save(mEntity);
					LOGGER.info("LOGGER : MsgServiceImpl : saved data to the DB");
					LOGGER.info("LOGGER : MsgServiceImpl : SERVICE:------------ENDS : validateAndSave()-------------------------------");
					return 0;
				} else {
					LOGGER.info("LOGGER : MsgServiceImpl : fields are missing, please enter the missing fields");
					return 1;
				}
			} else {
				LOGGER.info("LOGGER : MsgServiceImpl : dto is null");
				return 1;
			}
		} catch (Exception e) {
			LOGGER.info("LOGGER : MsgServiceImpl : "+e.getMessage());
		}
		LOGGER.info("LOGGER : MsgServiceImpl : ------------ENDS : validateAndSave()-------------------------------");

		return 0;
	}




}
